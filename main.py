import requests
import schedule
import time
import json
import os

def load_config():
    """Charge les param√®tres depuis config.json"""
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
        return config
    except Exception as e:
        print(f"‚ùå Erreur de chargement du fichier config.json : {e}")
        return None


def send_telegram_message(token, chat_id, message):
    """Envoie un message Telegram via l‚ÄôAPI Bot"""
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    data = {"chat_id": chat_id, "text": message}
    response = requests.post(url, data=data)

    if response.status_code != 200:
        print(f"‚ö†Ô∏è Erreur Telegram : {response.text}")
    else:
        print("‚úÖ Message envoy√© avec succ√®s.")


def job():
    """T√¢che principale ex√©cut√©e √† chaque intervalle"""
    config = load_config()
    if not config:
        print("‚ö†Ô∏è Impossible de charger la configuration.")
        return

    token = config.get("telegram_token")
    chat_id = config.get("chat_id")

    # Exemple : message d‚Äô√©tat
    message = "ü§ñ Bot A+ : tout fonctionne correctement ! ‚úÖ"
    send_telegram_message(token, chat_id, message)


if __name__ == "__main__":
    print("üîç D√©marrage du bot A+...")

    config = load_config()
    if not config:
        print("‚ö†Ô∏è Impossible de continuer sans config.json.")
        exit(1)

    token = config.get("telegram_token")
    chat_id = config.get("chat_id")

    # Envoi d‚Äôun message de d√©marrage
    send_telegram_message(token, chat_id, "üöÄ Bot A+ d√©marr√© avec succ√®s sur Render !")

    # Planifie l‚Äôenvoi d‚Äôun message toutes les 10 minutes
    schedule.every(10).minutes.do(job)

    print("‚è±Ô∏è Mises √† jour pr√©vues toutes les 10 minutes.")
    while True:
        schedule.run_pending()
        time.sleep(1)
